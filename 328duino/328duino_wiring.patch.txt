--- wiring.c	2020-03-19 16:22:17.374235200 +0900
+++ 328duino_wiring.txt	2020-04-28 11:58:55.370142000 +0900
@@ -32,8 +32,24 @@
 // the fractional number of milliseconds per timer0 overflow. we shift right
 // by three to fit these numbers into a byte. (for the clock speeds we care
 // about - 8 and 16 MHz - this doesn't lose precision.)
+#if			F_CPU<=16000000L
+#define		A328DUINO_SFT	4
+#elif		F_CPU==25000000L
+#define		A328DUINO_SFT	6
+#else
+#define		A328DUINO_SFT	5
+#endif
+#define		A328DUINO_CHK	(((64<<A328DUINO_SFT)/(F_CPU/1000000))>>6)
+#if			A328DUINO_CHK!=1 && A328DUINO_CHK!=2
+#error		"328duino: unsupported F_CPU"
+#endif
+#if		ARDUINO_AVR_328DUINO && A328DUINO_SFT==6
+#define FRACT_INC ((MICROSECONDS_PER_TIMER0_OVERFLOW % 1000 + 2) >> 2)
+#define FRACT_MAX (1000 >> 2)
+#else
 #define FRACT_INC ((MICROSECONDS_PER_TIMER0_OVERFLOW % 1000) >> 3)
 #define FRACT_MAX (1000 >> 3)
+#endif
 
 volatile unsigned long timer0_overflow_count = 0;
 volatile unsigned long timer0_millis = 0;
@@ -51,11 +67,21 @@
 	unsigned char f = timer0_fract;
 
 	m += MILLIS_INC;
+#if		ARDUINO_AVR_328DUINO && F_CPU==25000000L
+	unsigned	char	f2=f;
+	f += FRACT_INC;
+	if (f2>f)
+	{
+		f += 256 - FRACT_MAX;
+		m += 1;
+	}
+#else
 	f += FRACT_INC;
 	if (f >= FRACT_MAX) {
 		f -= FRACT_MAX;
 		m += 1;
 	}
+#endif
 
 	timer0_fract = f;
 	timer0_millis = m;
@@ -99,8 +125,36 @@
 #endif
 
 	SREG = oldSREG;
+#ifdef		ARDUINO_AVR_328DUINO
+
+	// for the frequency which is not an exponentiation of 2
+	uint32_t	us;
+	m=(m<<8) | t;
+
+	// us=m<unsigned int 32>*<const fixed point 8>
+	//		<const fixed point 8>=<unsigned int 4>.<frac 4>
+	//		<unsigned int 4> must be 0b01xx or 0b10xx
+#if			A328DUINO_SFT==6
+	t=((64<<A328DUINO_SFT) + (F_CPU/1000000/2))/(F_CPU/1000000);
+#else
+	t=(64<<A328DUINO_SFT)/(F_CPU/1000000);
+#endif
+	us=m;								// b6
+	if (t&0x80)
+		us += m;						// b7
+	for (t<<=2; t!=0; t<<=1)			// b5~b0
+	{
+		m>>=1;
+		if (t&0x80)
+			us += m;
+	}
+
+	return (us<<(6 - A328DUINO_SFT));
+
+#else	//	ARDUINO_AVR_328DUINO
 	
 	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
+#endif	//	ARDUINO_AVR_328DUINO
 }
 
 void delay(unsigned long ms)
